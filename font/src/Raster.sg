// ---   *   ---   *   ---
// RASTER
// Font rendering
//
// LIBRE SOFTWARE
// Licensed under GNU GPL3
// be a bro and inherit
//
// CONTRIBUTORS
// lyeb,

// ---   *   ---   *   ---
// deps

$:VERT;>

// ---   *   ---   *   ---
// info

  VERSION   v1.00.2;
  AUTHOR    "IBN-3DILA";

// ---   *   ---   *   ---
// inputs

  in uvec4 Vertex;
  uniform vec4 Xform;

// ---   *   ---   *   ---
// outputs

  out vec2 Tex_Cords;

  flat out uint Char_Idex;
  flat out uint Show_Ctl;

  flat out uint Fg_Col_Idex;
  flat out uint Bg_Col_Idex;

// ---   *   ---   *   ---
// ROM

  const float DIV8   = 1.0f / 256.0f;

  const float CENT_X = 8.0f / 1366.0f;
  const float CENT_Y = 8.0f / 768.0f;

  const vec2 NEGATIVE = vec2(
    CENT_X * 256,
    CENT_Y * 256

  );

// ---   *   ---   *   ---
// crux

void main() {

  // unpack vert
  vec2 position = vec2(
    float(Vertex.x  & 0xFFFF) * CENT_X,
    float(Vertex.x >>     16) * CENT_Y

  ) - NEGATIVE;

  Tex_Cords = vec2(
    float((Vertex.y & uint(0x1)) >> 0),
    float((Vertex.y & uint(0x2)) >> 1)

  );

  float scale = float(Vertex.z) * DIV8;

  // ^break down char data
  Char_Idex   = Vertex.w & uint(0xFF);

  Fg_Col_Idex = (Vertex.w >>  8) & uint(0xFF);
  Bg_Col_Idex = (Vertex.w >> 16) & uint(0xFF);

  Show_Ctl    = 1-(Vertex.w >> 24) & uint(0x1);

  // setout
  position   += vec2(

     Tex_Cords.x * CENT_X,
    -Tex_Cords.y * CENT_Y

  ) * scale;

  gl_Position = vec4(position,0,1);

};

// ---   *   ---   *   ---
// deps

$:FRAG;>

  #include <font/Colors>
  #include <font/Chars>

// ---   *   ---   *   ---
// outputs

  out vec4 Frag_Color;

// ---   *   ---   *   ---
// crux

void main() {

  // stretch UVs for reasons
  uint x = uint(Tex_Cords.x * 8);
  uint y = uint(Tex_Cords.y * 8);

  // manual texture fetch
  uint i = x+(y*8);
  uint z = uint(i > 31);

  i-=z*32;

  // solve pixel alpha
  bool r=bool(CHARS[Char_Idex][z] & uint(1<<i));
  r=r&&(Char_Idex >= Show_Ctl*0x1F);

  float fg_alpha = float(Fg_Col_Idex >> 4)/16.0f;
  float bg_alpha = float(Bg_Col_Idex >> 4)/16.0f;

  // palette fetch
  vec4  fg_col   = vec4(
    COLORS[Fg_Col_Idex&uint(0xF)],
    fg_alpha

  );

  vec4  bg_col   = vec4(
    COLORS[Bg_Col_Idex&uint(0xF)],
    bg_alpha

  );

  // ^apply
  vec4 col=mix(
    bg_col,
    fg_col,

    float(r)

  );

  // setout
  Frag_Color = col;

};

// ---   *   ---   *   ---

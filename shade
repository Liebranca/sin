#!/usr/bin/perl
# ---   *   ---   *   ---
# SHADE
# Makes SIN shader blocks
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,
# ---   *   ---   *   ---

# deps
  use v5.36.0;
  use strict;
  use warnings;

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;
  use Arstd::IO;

  use Shb7;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.00.1;#b
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# global state

  my %Cache=(

    -OPTS      => undef,

    'VERT_SRC' => [],
    'FRAG_SRC' => [],

    'ATTRS'    => [],
    'UNIFORMS' => [],
    'UBOS'     => [],
    'SSBOS'    => [],
    'SAMPLERS' => [],

    'FRAGINS'  => [],

  );

# ---   *   ---   *   ---
# info meths

sub help {

  my @header=(

    'shade <options> <filepaths>',

    'Runs a simple preprocessor step on sin-styled '.
    '(*.sg) GLSL shaders; additionally, shade '.
    'generates shblk.* files that help reuse '.
    'GLSL code and embed it in C executables'.

    '$:parg;>'.

    'shade allows piecing shaders together via '.
    '#include and facilitates syncing between vert '.
    'shader output and frag shader input'

  );

  my @OPTS=@{ $CACHE{-OPTS} };
  print avt::ex 'help',[@header,@OPTS],'';

  exit;

};

# ---   *   ---   *   ---

sub version {
  print avt::version(
    'shade',VERSION,AUTHOR

  );

  exit;

};

# ---   *   ---   *   ---
# find/read shader blocks

sub rdmeta($fname) {

  my $src=Shb7::ffind("$fname.sgm");
  exit unless defined $src;

  # append included block
  my $meta=retrieve($src);
  for my $key(keys %$meta) {
    push @{$Cache{$key}},$meta->{$key};

  };

};

# ---   *   ---   *   ---
# find included file

sub parse_inc($line) {

  state $re=qr{\s*\#include\s*

    \<(?<name> [_\w][_\w\d/]+)\>

  }x;

  $line=~ s[$re][]sxgm;

  my $name=$+{name};
  $name=~ s{\.[\w|\d]*}{}sxgm;

  rdmeta($name);

  return 'shader::'.$name.",\n";

};

# ---   *   ---   *   ---
# looks for special decls

sub is_decl {

  my $line=shift;
  my $ref=undef;

  if(($line=~ m/in\s+/)) {
    $line=~ s/in\s+//;

    if(($line=~ m/sampler.*\s+/)) {
      $line=~ s/sampler.*\s+//;
      $line=~ s/\;//;

      $ref=$CACHE{'SAMPLERS'};

    } else {
      $line=~ s/(vec|mat|.*int|float).*\s+//;
      $line=~ s/\;//;

      $ref=$CACHE{'ATTRS'};

    };

# ---   *   ---   *   ---

  } elsif($line=~
      m/uniform\s+(vec|mat|.*int|float).*\s+/

  ) {
      $line=~ s/uniform\s+//;
      $line=~ s/(vec|mat|.*int|float).*\s+//;

      $line=~ s/\;//;

      $ref=$CACHE{'UNIFORMS'};

# ---   *   ---   *   ---

  } elsif($line=~
    m/^(?!(?:layout))out|flat\s+out\s+/

  ) {

    $line=~ s/out\s+//;
    my $in='in ';

    if(($line=~ m/flat\s+/)) {
      $line=~ s/flat\s+//;
      $in='flat in ';

    };

    $line=$in.$line;
    $line=~ s/\s/\$/g;
    $ref=$CACHE{'FRAGINS'};

  };

  if($ref) {
    push @$ref,$line;

  };


};

# ---   *   ---   *   ---
# in glsl, out C

sub compch {

  my $top=glob(shift @ARGV);
  my %h=%{ avt::walk($top) };

  my $outc='';
  my $outh='';
  my $outm='';

  # find glsl files and iter thru
  for my $path(keys %h) {
    my @files=grep m/\.glsl/,@{ $h{$path} };
    for my $fname(@files) {

      $path=($path eq '<main>')
        ? $top
        : $path
        ;

      my $src="$path/$fname";

      my $name=$fname;
      $name=~ s/\.[\w|\d]*//;

      $outh.="extern const char* sh_blk_$name;\n";
      $outc.="const char* sh_blk_$name=\n";

# ---   *   ---   *   ---

      # read each file and get meta
      open SRC,'<',$src or die $!;
      while((my $line=readline SRC)) {
        chomp $line;

        # strip // comments
        # makes perfect sense to me!
        $line=~ s/\s*\/\/.*//;

        if($line) {

          is_decl $line;
          $outc.="\"$line\\n\"\n";

        };

      };

      close SRC;
      $outc.=";\n";

# ---   *   ---   *   ---

      $outm.="$name\n";

      # save meta to var and cache wipe
      for my $i(
        'ATTRS',
        'UNIFORMS',
        'UBOS',
        'SSBOS',
        'SAMPLERS',
        'FRAGINS'

      ) {

        my @data=@{ $CACHE{$i} };

        $outm.=(@data)
          ? "$i ".(join ' ',@data)."\n"
          : "$i None\n"
          ;

        ;$CACHE{$i}=[];

      };

    };

  };

# ---   *   ---   *   ---
# dump results

  print
    $outc.'$:parg;>'.
    $outh.'$:parg;>'.
    $outm

  ;

};

# ---   *   ---   *   ---
# in sin glsl, out sin shaderParams

sub compsg {

  my $fname=shift;

  my $src=avt::ffind $fname;
  if(!$src) {exit;};

  my $name=$fname;
  $name=~ s/\.[\w|\d]*//;

  my $out_to=0;

  my @srcs=('','');
  my @includes=('','');

# ---   *   ---   *   ---

  open SRC,'<',$src or die $!;
  while((my $line=readline SRC)) {

    chomp $line;

    if($line eq '$:VERT;>') {
      $line='';

    } elsif($line eq '$:FRAG;>') {
      $out_to=1;

      my $ref=$CACHE{'FRAGINS'};

      while(@$ref) {
        my $item=shift @$ref;
        $item=~ s/\$/ /g;

        $srcs[1].="\"$item\\n\"\n";

      };

      $line='';

    } elsif($line=~ m/\#include/) {
      $includes[$out_to].=parse_inc $line;
      $line='';

    } else {

      # strip comments
      $line=~ s/\s*\/\/.*//;

      is_decl $line;

      $line=($line ne '')
        ? "\"$line\\n\"\n"
        : ''
        ;

    };

    if($line) {$srcs[$out_to].=$line;};

  };

  close SRC;

# ---   *   ---   *   ---

  $srcs[0]=''.
    'const char* vert_src[]={'."\n".
    $includes[1].
    $srcs[0].

    "};\n"
    ;

  $srcs[1]=''.
    'const char* frag_src[]={'."\n".
    $includes[1].
    $srcs[1].

    "};\n"
    ;

  my $out=''.
    $srcs[0].$srcs[1].
    "};\nconst SHDP pr_$name={\n"
    ;

  for my $ref(
    $CACHE{'ATTRS'},
    $CACHE{'UNIFORMS'},
    $CACHE{'UBOS'},
    $CACHE{'SSBOS'},
    $CACHE{'SAMPLERS'}

  ) {

    $out.="{";

    my $i=0;for my $item(@$ref) {
      $out.="\"$item\"";$i++;

      if($i<scalar(@$ref)) {
        $out.=',';

      };

    };

    $out.='},'.scalar(@$ref).",\n";

  };

  $out=substr $out,0,length($out)-2;
  $out.="\n};\n";

  print $out;

};

# ---   *   ---   *   ---

my @OPTS=@{

  cash::moptab(

    '-h,--help',
    'Show this message',
    \&help,

    '-v,--version',
    'Print version info and exit',
    \&version,

    '-I <path>',
    'Append <path> to file search path',
    \&avt::stinc,

    '-b <path>',
    'Reads <path> for glsl files, then transpiles '.
    'them to C shblk.* files',
    \&compch,

  )

};

$CACHE{-OPTS}=\@OPTS;
cash::runtab(\@ARGV);

# ---   *   ---   *   ---
# remaining args are assumed to be .sg files

while(@ARGV) {
  my $nx=shift;
  compsg($nx);

};

# ---   *   ---   *   ---
1; # ret

// ---   *   ---   *   ---
// MATBAKE
// Crackhead levels of
// render to texture
//
// LIBRE SOFTWARE
// Licensed under GNU GPL3
// be a bro and inherit
//
// CONTRIBUTORS
// lyeb,

// ---   *   ---   *   ---
// info

$:VERT;>

  VERSION   v0.00.5b;
  AUTHOR    "IBN-3DILA";

// ---   *   ---   *   ---
// deps

  #include <mesh/CRK_Angular>

  out vec3  Normal;
  out vec3  Tangent;
  out vec4  Point;

  out float Vert_Light;
  out float Vert_AO;

// ---   *   ---   *   ---

void main(void) {

  vec4 co     = extract_xyz();

  Normal      = extract_n();
  Tangent     = extract_t();

  Point       = co;

  Tex_Cords   = extract_tex();
  gl_Position = apply_transform(co);

//  gl_Position = vec4(
//
//    (Tex_Cords.x-0.5)*2,
//    (Tex_Cords.y-0.5)*2,
//
//    0,1
//
//  );

  fDraw_ID    = Draw_Data[0];
  fSurf_ID    = Draw_Data[1];

  unpack_view();

  mat3 IV_TBN = transpose(
    calc_tbn(Normal,Tangent)

  );

  Cam_Fwd     = IV_TBN * Cam_Fwd;
  Vert_Light  = vl_smooth(IV_TBN * Normal);

  Vert_AO     =float(

    (Vertex[1] >> 24)
  & uint(0xFF)

  ) * 0.003921f;

};

// ---   *   ---   *   ---
// deps

$:FRAG;>

  #include <mesh/CRK_Angular>

// ---   *   ---   *   ---
// inputs

  uniform sampler2DArray Surface;

// ---   *   ---   *   ---
// outputs

  out vec4 Frag_Color;

// ---   *   ---   *   ---
// ROM

  const vec3 Y_AXIS=vec3(0,1,0);
  const vec3 Y_VOID=vec3(-1,1,0);

// ---   *   ---   *   ---
// GBL

  mat3 IV_TBN;

// ---   *   ---   *   ---
// ^calcs

void calc_iv_tbn(void) {

  vec3 n=normalize(Normal);
  vec3 t=normalize(Tangent);

  t=normalize(t-dot(t,n)*n);

  vec3 b=cross(n,t);
  IV_TBN=transpose(mat3(t,b,n));

};

// ---   *   ---   *   ---
// multiply if sum < 0.5
// else add

vec3 overlay(vec3 dst,vec3 src,float fac) {

  float sum      = (src.r+src.g+src.b)/3.0f;

  float tresh    = smoothstep(0.15f,1.0f,sum*2.0f);
  float iv_tresh = 1-tresh;

  float mask     = smoothstep(0,0.5f,tresh);
  float iv_mask  = 1-mask;

  // shadow
  vec3 a=dst*src;

  // light
  vec3 b=dst*src*1.25f;

  return mix(

    dst,

    a * iv_tresh * iv_mask
  + b * tresh    * mask,

    fac

  );

};

// ---   *   ---   *   ---
// src: yiwenl/glsl-rotation-2d
// added (approx) deg2rad

vec2 rotate(vec2 v, float a) {

  a*=0.0174533f;

  float s = sin(a);
  float c = cos(a);

  mat2  m = mat2(c,-s,s,c);

	return m * v;

};

// ---   *   ---   *   ---
// normal ipol mask

vec2 nipol(void) {

  float aby    = abs(Normal.y);
  float abx    = abs(Normal.x) + abs(Normal.z);
  float step   = 0.5f * float(aby < 0.5f);

  float treshy = smoothstep(0.35f,1,aby);
  float treshx = 1-smoothstep(0,1*step,aby);

  float fay=normalize(aby)*treshy;
  float fax=normalize(abx)*treshx;

  return vec2(fax,fay);

};

// ---   *   ---   *   ---
// uv tax evation

vec4 boxmapping(void) {

  vec2 uvy=rotate(Point.zx,45);

  vec4 x=texture(Surface,vec3(Point.zy,Tex_Cords.z));
  vec4 y=texture(Surface,vec3(uvy,Tex_Cords.z));
  vec2 f=nipol();

  return (x*f.x + y*f.y) / (f.x+f.y);

};

// ---   *   ---   *   ---
// determine height from color (yes)

vec4 heightmap(vec4 color) {

  // color to grayscale
  float luma=
    0.257f*color.r
  + 0.504f*color.g
  + 0.098f*color.b
  ;

  float iv_luma=1-luma;

  // find arbitrary up
  const vec3 axes[]={Y_AXIS,Y_VOID};
  vec3 yax=axes[uint(abs(Normal.y) >= 0.99f)];

  // ^get local up
  vec3 n   = normalize(Normal);
  vec3 fwd = n;
  vec3 hax = cross(n,yax);
  vec3 up  = cross(n,hax);

  // scale vectors by inverse height
  hax *= luma;
  up  *= iv_luma;
  fwd *= luma;

  // ^solve by aversion to matmul
  vec3 push=
    (fwd-n)
  - (up-n)
  - (hax-n)
  ;

  vec3 bump=normalize(IV_TBN * push);
  bump.xy*=luma;

  return vec4(bump,luma);

};

// ---   *   ---   *   ---
// ^roughness from height

float roughness(vec4 height) {

  float fac=clamp(
    (1-abs(height.x))
  * (1-abs(height.y)),

    0,1

  );

  return fac*height.z*(1-height.w);

};

// ---   *   ---   *   ---
// approximate AO from heightmap
// by averaging dot-eye across
// a multitude of normals

float AO(vec4 height) {

  float d=0.0f;
  const float zenith[]={
    -2.0f,-0.25f,0.5f

  };

  for(int y=0;y<3;y++) {

  for(int x=0;x<5;x++) {
  for(int z=0;z<5;z++) {

    vec3 n=normalize(

      IV_TBN * vec3(
        (x-2)*0.5f,
        zenith[y],

        (z-2)*0.5f

      )

    );

    d+=max(0,dot(
      n,height.xyz

    ) * height.w * 2.0f);

  }}};

  return clamp((d/75)*2.0f,0,1);

};

// ---   *   ---   *   ---
// get fine edges from ao value

float tight_edge(float fac,float limit) {
  float edge=abs((fac-0.5)*2.0f);
  return smoothstep(limit,1.0f,edge);

};

// ---   *   ---   *   ---
// shading trick: do not raytrace
// gives approximate ao+curvature

vec2 tight_AOC(vec4 height) {

  float a=smoothstep(

    0,
    0.25f,

    Vert_AO

  );

  float b=smoothstep(

    0,
    0.65f,

    AO(height)

  );

  float ao=clamp(a*b,0,1);

  float curv=smoothstep(

    0.1f,0.35f,

    b*tight_edge(b,0.125f)*4.0f
  + tight_edge(Vert_AO,0.8f)*0.1f

  );

  // filter out brighter/darker spots
  // in the ao mask from curvature
  curv *= smoothstep(0,0.25f,ao);
  curv *= 1-smoothstep(0.0f,0.5f,ao);

  // ^brighten to compensate over-filtering
  curv += curv;

  return vec2(ao,curv);

};

// ---   *   ---   *   ---

void main(void) {

  // [insert texgen schtick]

  calc_iv_tbn();

  vec4  color   = boxmapping();
  vec4  height  = heightmap(color);
  vec2  aoc     = tight_AOC(height);
  float rough   = roughness(height);
  float soft    = 1-rough;

  // vec-to-eye
  vec3  vto    = Cam_Pos-vec3(Point);
  vec3  iv_vto = vec3(Point)-Cam_Pos;

  // ^to tangent space
  vto    = IV_TBN * normalize(vto);
  iv_vto = IV_TBN * normalize(iv_vto);

  // controls dot eye
  vec3 refl=reflect(Cam_Fwd,height.xyz);

  // ^derive
  float d=clamp(
    dot(iv_vto,refl)
  * height.w,

    0,1

  );

  float iv_d=clamp(pow(
    dot(vto,refl)
  * height.w,

    2

  ),0,1);

  float frag_light=dot(Cam_Fwd,height.xyz);
  frag_light=smoothstep(0,0.5f,frag_light);

// ---   *   ---   *   ---

  float near = smoothstep(0,height.w,d) * 2.0f;
  float far  = smoothstep(height.w,1,d) * 4.0f;

  float vl   = clamp((near+far),0.0f,1.0f);

  // get colors
  vec3 ambient=(
    vec3(0,0,0.5f) * 0.8f * (1-frag_light)
  + vec3(0,0,0.5f) * 0.2f

  ) * aoc.x;

  vec3 color_ao=mix(
    color.rgb,
    color.rgb*aoc.x,

    0.95f

  )*(1+aoc.y*2.0f);

  vec3 diffuse=(

    color_ao
  * frag_light

  + ambient

  );

  color_ao=mix(
    color.rgb,
    color.rgb*aoc.x,

    0.85f

  )*(1+aoc.y*2.25f);

  vec3 specular=
    color_ao*vl
  * soft*2.0f
  ;

  Frag_Color=vec4(

    ambient

  + diffuse
  + specular,

    1

  );

//  Frag_Color=vec4(
//    vec3((height.xyz*0.5f)+0.5f),
//    1
//
//  );

//  Frag_Color=vec4(vec3(),1);

};

// ---   *   ---   *   ---

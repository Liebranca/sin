#!/usr/bin/perl
# ---   *   ---   *   ---
# SIN GL
# GLSL preprocessor
#
# LIBRE SOFTWARE
# Licensed under GNU GPL3
# be a bro and inherit
#
# CONTRIBUTORS
# lyeb,

# ---   *   ---   *   ---
# deps

package main;

  use v5.36.0;
  use strict;
  use warnings;

  use English qw(-no_match_vars);

  use lib $ENV{'ARPATH'}.'/lib/sys/';

  use Style;

  use Arstd::String;
  use Arstd::Path;
  use Arstd::IO;

  use Shb7::Path;
  use Cli;

  use lib $ENV{'ARPATH'}.'/lib/';

  use Emit::Std;
  use Emit::SinGL;

  use Grammar::SinGL;

# ---   *   ---   *   ---
# info

  our $VERSION = v0.05.0;#a
  our $AUTHOR  = 'IBN-3DILA';

# ---   *   ---   *   ---
# command line

  my $M=Cli->nit(

    @{$Cli::Fstruct::ATTRS},

    {id=>'inc',short=>'-I',argc=>1},
    {id=>'out',short=>'-o',argc=>1},

    {id=>'echo',short=>'-e',argc=>0},

  );

# ---   *   ---   *   ---
# get command line args

my @Files=Cli::Fstruct::proto_search($M);

# get path
my @Includes=($M->{inc} ne $NULL)
  ? split $COMMA_RE,$M->{inc}
  : ()
  ;

# ^set
Shb7::push_includes(
  $ENV{'ARPATH'}.'/sin/',
  @Includes

);

# ---   *   ---   *   ---
# get output dir

my $Out_Dir=($M->{out} ne $NULL)
  ? glob($M->{out})
  : glob('./')
  ;

# ^catch
errout(

  q[Not a directory: %s],

  args => [$Out_Dir],
  lvl  => $AR_FATAL,

) unless -d $Out_Dir;

# ---   *   ---   *   ---
# gives back files that need to
# be re-processed

sub flist_filter(@ar) {

  my @out=();
  $Out_Dir=~ s[/+][/];
  $Out_Dir=~ s[^/|/$][]sxmg;

  for my $fname(@ar) {

    my $name = nxbasef($fname);
    my $dst  = "$Out_Dir/$name.hpp_sg";

    push @out,$fname=>$dst
    if moo($dst,$fname);

  };

  if(@out) {

    say {*STDERR}
      $Emit::Std::ARTAG,
      "rebuilding SinGL headers... "

    ;

  };

  return @out;

};

# ---   *   ---   *   ---
# main loop

my @Pending=flist_filter(@Files);
while(@Pending) {

  my $fname = shift @Pending;
  my $dst   = shift @Pending;

  say {*STDERR} $Emit::Std::ARSEP,$fname;

  my $stout = Grammar::SinGL->fparse($fname,$dst);
     $stout = Grammar::SinGL->flatten($stout);

  my $code  = Emit::SinGL->hpp($stout);

  my $v=vstr($VERSION);
  $fname=$stout->{name} .(
    " $stout->{version}"
    x (defined $stout->{version})

  );

  # slap the siggy ;>
  $code=

    "// SinGL $v\n"
  . "// file assembled from $fname\n"

  . "$code"

  ;

# ---   *   ---   *   ---
# spit it

  $code=~ s[

    \#ifdef \s+ __cplusplus
    [^\#]+
    \#endif

  ][]sxmg;

  if($M->{echo} eq $NULL) {
    owc($dst,$code);

  } else {
    say $code;

  };

};

# ---   *   ---   *   ---
1; # ret
